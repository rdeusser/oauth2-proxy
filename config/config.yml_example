# oauth2 config

# you should probably start with one of the other configs in the example directory
# oauth2 proxy does a fairly good job of setting its config to sane defaults

# be aware of your indentation, the only top level elements are `oauth2` and `oauth`. 

oauth2:
  # logLevel: debug
  logLevel: info

  # testing - force all 302 redirects to be rendered as a webpage with a link
  # if you're having problems, turn on testing
  testing: true

  listen: 0.0.0.0
  port: 9090

  # domains -
  # each of these domains must serve the url https://oauth2.$domains[0] https://oauth2.$domains[1] ...
  # so that the cookie which stores the JWT can be set in the relevant domain
  # you usually *don't* want to list every individual website that will be protected
  # if you have siteA.internal.yourdomain.com and siteB.internal.yourdomain.com 
  # then your domains should be set as yourdomain.com or perhaps internal.yourdomain.com   
  # usually you'll just have one.
  # Comment `domains:` out if you set allowAllUser:true
  domains:
  - yourdomain.com
  - yourotherdomain.com

  # set allowAllUsers: true to use Oauth2 Proxy to just accept anyone who can authenticate at the configured provider
  # allowAllUsers: false

  # Setting publicAccess: true will accept all requests, even without a cookie. 
  # If the user is logged in, the cookie will be validated and the user header will be set.
  # You will need to direct people to the Oauth2 Proxy login page from your application.
  # publicAccess: false

  # whiteList - (optional) allows only the listed usernames
  # usernames are usually email addresses (google, most oidc providers) or login/username for github and github enterprise
  whiteList:
  - bob@yourdomain.com
  - alice@yourdomain.com
  - joe@yourdomain.com

  jwt:
    # secret - a random string used to cryptographically sign the jwt
    # Oauth2 Proxy complains if the string is less than 44 characters (256 bits as 32 base64 bytes)
    # if the secret is not set here then..
    # look for the secret in `./config/secret`
    # if `./config/secret` doesn't exist then randomly generate a secret and store it there
    # in order to run multiple instances of oauth2 on multiple servers (perhaps purely for validating the jwt),
    # you'll want them all to have the same secret
    secret: your_random_string
    issuer: Oauth2
    # number of minutes until jwt expires
    maxAge: 240
    # compress the jwt
    compress: true

  cookie: 
    # name of cookie to store the jwt
    name: Oauth2Cookie
    # optionally force the domain of the cookie to set
    # domain: yourdomain.com
    secure: true
    httpOnly: true
    # Set cookie maxAge to 0 to delete the cookie every time the browser is closed.
    maxAge: 14400

  session:
    # name of session variable stored locally
    name: Oauth2Session
    # key - a cryptographic string used to store the session variable
    # if the key is not set here then it is generated at startup and stored in memory
    # Oauth2 Proxy complains if the string is less than 44 characters (256 bits as 32 base64 bytes)
    # you only want to set this if you're running multiple user facing oauth2.yourdomain.com instances
    key: you_random_key


  headers:
    jwt: X-Oauth2-Token
    querystring: access_token
    redirect: X-Oauth2-Requested-URI

    # GENERAL WARNING ABOUT claims AND tokens
    # all of these config elements can cause performance impacts due to the amount of information being 
    # moved around.  They will get added to the Oauth2 cookie and (possibly) make it large.  The Oauth2 cookie will 
    # get split up into several cookies. Every request will process the cookies in order to extract and create the 
    # additional headers which get returned.  But if you need it, you need it.
    # With large cookies and headers it will require additional nginx config to open up the buffers a bit..
    # see `large_client_header_buffers` http://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers
    # and `proxy_buffer_size` http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffer_size

    # claims - a list of claims that will be stored in the JWT and passed down to applications via headers
    # By default claims are sent down as headers with a prefix of X-Oauth2-IdP-Claims-ClaimKey
    # Only when a claim is found in the user's info will the header exist.  This is optional.  These are case sensitive.
    claims:
      - groups
      - given_name
    # these will result in two headers being passed back to nginx
    # X-Oauth2-IdP-Claims-groups
    # X-Oauth2-IdP-Claims-given_name
      
    # claimheader - Customizable claim header prefix (instead of default `X-Oauth2-IdP-Claims-`) 
    # claimheader: My-Custom-Claim-Prefix

    # accesstoken - Pass the user's access token from the provider.  This is useful if you need to pass the IdP token to a downstream
    # application. This is optional.
    # accesstoken: X-Oauth2-IdP-AccessToken
    # idtoken - Pass the user's Id token from the provider.  This is useful if you need to pass this token to a downstream
    # application. This is optional.
    # idtoken: X-Oauth2-IdP-IdToken

  db: 
    file: data/oauth2_bolt.db

  # test_url - add this URL to the page which oauth2 displays
  test_url: http://yourdomain.com
  # webapp - WIP for web interface to oauth2 (mostly logs)
  # webapp: true

#
# OAuth Provider
# configure ONLY ONE of the following oauth providers
#
oauth:

  # Google
  provider: google
  # create new credentials at:
  # https://console.developers.google.com/apis/credentials
  client_id: 
  client_secret: 
  callback_urls:
    - http://oauth2.yourdomain.com:9090/auth
    - http://oauth2.yourotherdomain.com:9090/auth
  preferredDomain: yourdomain.com

  # GitHub
  # https://developer.github.com/apps/building-integrations/setting-up-and-registering-oauth-apps/about-authorization-options-for-oauth-apps/
  provider: github
  client_id:
  client_secret:
  # callback_url is configured at github.com when setting up the app
  # set to e.g. https://oauth2.yourdomain.com/auth
  # defaults (uncomment and change these if you are using github enterprise on-prem)
  # auth_url: https://github.com/login/oauth/authorize
  # token_url: https://github.com/login/oauth/access_token
  # user_info_url: https://api.github.com/user?access_token=
  # scopes:
    # - user

  # Generic OpenID Connect
  provider: oidc
  client_id: 
  client_secret: 
  auth_url: https://{yourOktaDomain}/oauth2/default/v1/authorize
  token_url: https://{yourOktaDomain}/oauth2/default/v1/token
  user_info_url: https://{yourOktaDomain}/oauth2/default/v1/userinfo
  scopes:
    - openid
    - email
    - profile
  callback_url: http://oauth2.yourdomain.com:9090/auth

  # IndieAuth
  # https://indielogin.com/api
  provider: indieauth
  client_id: http://yourdomain.com
  auth_url: https://indielogin.com/auth
  callback_url: http://oauth2.yourdomain.com:9090/auth
  
